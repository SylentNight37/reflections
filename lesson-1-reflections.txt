How did viewing a diff between two versions of a file help you see tht bug that was introduced?

Comparing the two versions of the file was helpful in debugging the application since we knew that one of them worked previously. Since there were changes introduced in the new version, comparing the two versions helped identify what had changed, which allowed us to narrow in on possible culprits for the bug.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Having access to long versions helps make you more efficient by allowing you to view the progression of the code. This will allow you to track how things have changed over time, which can lead you to view the thought-process involved, and the order of introduction for features. This also helps to keep a change log as the software is developed.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

The pro of manually saving is that you have complete control over where your logical breaks are made in the versions of the program, which allows you to browse through individual changes, easily allowing you to view, change, or revert the changes. The con is that you run the risk of losing data if you forget to save, or if there is some other event that disrupts your work.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

I think that it's due to the nature of the system's design regarding the intended use of the system. Git is designed to work with programming, which relies on interrelated files. Many files work together, and updates are commonly performed on multiple files. Contrasting this, systems like Google Docs are designed around normal document development, which are usually isolated from each other. Even though you can have multiple documents related to a single project, those documents are usually isolated, and can be updated independently, meaning that changes to one document wouldn't cause issues to other documents.

How can you use the commands git log and git diff to view the history of files?

Git log allows you to see the revisions of a git repository in sequential order, along with the unique ID of the commit and a brief message about the nature of the commit. This allows you to see an overview of what changes happened in what order. The git diff command allows the comparison of two commits, which allows you to view what changes were made from one version to the next.

How might using version control make you more confident to make changes that could break something?

The fear that you might break an application that you have spent so much time developing can inhibit you from being willing to make those changes. Adding versions to the application allows you to compare versions and more easily remove a bug that was introduced.

Now that you have your workspace set up, what do you want to try using Git for?

I'm going through these courses to improve my web development skills, so I'd like to use Git to start working on commits and repositories for a web application.